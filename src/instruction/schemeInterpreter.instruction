(
(assign continue done)
eval-dispatch
    (branch (list? (fetch exp)) ev-list)
    (branch (= (fetch exp) +) raw-value)
    (branch (= (fetch exp) -) raw-value)
    (branch (= (fetch exp) *) raw-value)
    (branch (= (fetch exp) /) raw-value)
    (branch (= (fetch exp) %) raw-value)
    (branch (= (fetch exp) =) raw-value)
    (branch (= (fetch exp) car) raw-value)
    (branch (= (fetch exp) cdr) raw-value)
    (branch (= (fetch exp) cons) raw-value)
    (branch (symbol? (fetch exp)) ev-variable)
raw-value
    (assign val (fetch exp))
    (goto (fetch continue))
ev-list
    (branch (= (car (fetch exp)) lambda) ev-lambda)
    (branch (= (car (fetch exp)) cond) ev-cond)
    (goto ev-application)
ev-lambda
    (assign val (cons (fetch env) (cdr (fetch exp))))
    (goto (fetch continue))
ev-cond
    (assign pairs (cdr (fetch exp)))
    (save continue)
ev-cond-loop
    (branch (= (fetch pairs) (quote ())) cond-not-found)
    (assign exp (car (car (fetch pairs))))
    (save env)
    (save pairs)
    (assign continue ev-cond-check)
    (goto eval-dispatch)
ev-cond-check
    (branch (fetch val) ev-cond-result)
    (restore pairs)
    (restore env)
    (assign pairs (cdr (fetch pairs)))
    (goto ev-cond-loop)
ev-cond-result
    (restore pairs)
    (restore env)
    (restore continue)
    (assign exp (car (cdr (car (fetch pairs)))))
    (goto eval-dispatch)
ev-variable
    (branch (= (fetch env) (quote ())) variable-not-found)
    (assign tmp (car (fetch env)))
    (assign key (car (fetch tmp)))
    (branch (= (fetch key) (fetch exp)) found-variable)
    (assign env (cdr (fetch env)))
    (goto ev-variable)
found-variable
    (assign val (car (cdr (fetch tmp))))
    (goto (fetch continue))
ev-application
    (assign unev (cdr (fetch exp)))
    (assign exp (car (fetch exp)))
    (save continue)
    (save env)
    (save unev)
    (assign continue eval-args)
    (goto eval-dispatch)
eval-args
    (restore unev)
    (restore env)
    (assign fun (fetch val))
    (save fun)
    (assign argl (quote ()))
    (goto eval-arg-loop)
eval-arg-loop
    (save argl)
    (assign exp (car (fetch unev)))
    (branch (= (cdr (fetch unev)) (quote ())) eval-last-arg)
    (save env)
    (save unev)
    (assign continue accumulate-arg)
    (goto eval-dispatch)
accumulate-arg
    (restore unev)
    (restore env)
    (restore argl)
    (assign argl (cons (fetch val) (fetch argl)))
    (assign unev (cdr (fetch unev)))
    (goto eval-arg-loop)
eval-last-arg
    (assign continue accumulate-last-arg)
    (goto eval-dispatch)
accumulate-last-arg
    (restore argl)
    (assign argl (cons (fetch val) (fetch argl)))
    (assign rargl (quote ()))
    (goto reverse-argl)
finish-reverse-argl
    (assign argl (fetch rargl))
    (restore fun)
    (goto apply-dispatch)
reverse-argl
    (branch (= (fetch argl) (quote ())) finish-reverse-argl)
    (assign rargl (cons (car (fetch argl)) (fetch rargl)))
    (assign argl (cdr (fetch argl)))
    (goto reverse-argl)
apply-dispatch
    (branch (symbol? (fetch fun)) primitive-apply)
    (goto compound-apply)
primitive-apply
    (branch (= (fetch fun) +) apply-add)
    (branch (= (fetch fun) -) apply-sub)
    (branch (= (fetch fun) *) apply-mul)
    (branch (= (fetch fun) /) apply-div)
    (branch (= (fetch fun) %) apply-mod)
    (branch (= (fetch fun) =) apply-eq)
    (branch (= (fetch fun) car) apply-car)
    (branch (= (fetch fun) cdr) apply-cdr)
    (branch (= (fetch fun) cons) apply-cons)
apply-add
    (assign val (+ (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-sub
    (assign val (- (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-mul
    (assign val (* (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-div
    (assign val (/ (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-mod
    (assign val (% (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-eq
    (assign val (= (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
apply-car
    (assign val (car (car (fetch argl))))
    (restore continue)
    (goto (fetch continue))
apply-cdr
    (assign val (cdr (car (fetch argl))))
    (restore continue)
    (goto (fetch continue))
apply-cons
    (assign val (cons (car (fetch argl)) (car (cdr (fetch argl)))))
    (restore continue)
    (goto (fetch continue))
compound-apply
    (assign par (car (cdr (fetch fun))))
    (assign env (car (fetch fun)))
    (goto extend-env)
eval-apply
    (assign exp (car (cdr (cdr (fetch fun)))))
    (restore continue)
    (goto eval-dispatch)
extend-env
    (branch (= (quote ()) (fetch par)) eval-apply)
    (assign env (cons (cons (car (fetch par)) (cons (car (fetch argl)) (quote ()))) (fetch env)))
    (assign par (cdr (fetch par)))
    (assign argl (cdr (fetch argl)))
    (goto extend-env)
done
)
